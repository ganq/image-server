# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := pagespeed_library
DEFS_Debug := '-DGOOGLE_PROTOBUF_NO_RTTI' \
	'-DPAGESPEED_PNG_OPTIMIZER_GIF_READER' \
	'-D__STDC_FORMAT_MACROS' \
	'-DDYNAMIC_ANNOTATIONS_ENABLED=1' \
	'-D_DEBUG'

# Flags passed to both C and C++ files.
CFLAGS_Debug := -Werror \
	-pthread \
	-fno-exceptions \
	-Wall \
	-Wno-unused-parameter \
	-Wno-missing-field-initializers \
	-D_FILE_OFFSET_BITS=64 \
	-fvisibility=hidden \
	-fno-strict-aliasing \
	-O0 \
	-g

# Flags passed to only C (and not C++) files.
CFLAGS_C_Debug := 

# Flags passed to only C++ (and not C) files.
CFLAGS_CC_Debug := -fno-rtti \
	-fno-threadsafe-statics \
	-fvisibility-inlines-hidden

INCS_Debug := -Ithird_party/chromium/src \
	-I. \
	-Ithird_party/instaweb/src \
	-Ithird_party/protobuf2 \
	-Ithird_party/protobuf2/src/src \
	-Ithird_party/zlib \
	-I$(obj)/gen/protoc_out

DEFS_Release := '-DGOOGLE_PROTOBUF_NO_RTTI' \
	'-DPAGESPEED_PNG_OPTIMIZER_GIF_READER' \
	'-D__STDC_FORMAT_MACROS' \
	'-DNDEBUG'

# Flags passed to both C and C++ files.
CFLAGS_Release := -Werror \
	-pthread \
	-fno-exceptions \
	-Wall \
	-Wno-unused-parameter \
	-Wno-missing-field-initializers \
	-D_FILE_OFFSET_BITS=64 \
	-fvisibility=hidden \
	-fno-strict-aliasing \
	-O2 \
	-fno-ident \
	-fdata-sections \
	-ffunction-sections \
	-fno-asynchronous-unwind-tables

# Flags passed to only C (and not C++) files.
CFLAGS_C_Release := 

# Flags passed to only C++ (and not C) files.
CFLAGS_CC_Release := -fno-rtti \
	-fno-threadsafe-statics \
	-fvisibility-inlines-hidden

INCS_Release := -Ithird_party/chromium/src \
	-I. \
	-Ithird_party/instaweb/src \
	-Ithird_party/protobuf2 \
	-Ithird_party/protobuf2/src/src \
	-Ithird_party/zlib \
	-I$(obj)/gen/protoc_out

OBJS := $(obj).target/$(TARGET)/pagespeed/rules/avoid_bad_requests.o \
	$(obj).target/$(TARGET)/pagespeed/rules/avoid_css_import.o \
	$(obj).target/$(TARGET)/pagespeed/rules/avoid_document_write.o \
	$(obj).target/$(TARGET)/pagespeed/rules/combine_external_resources.o \
	$(obj).target/$(TARGET)/pagespeed/rules/enable_gzip_compression.o \
	$(obj).target/$(TARGET)/pagespeed/rules/leverage_browser_caching.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minify_css.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minify_html.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minify_javascript.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minify_rule.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minimize_dns_lookups.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minimize_redirects.o \
	$(obj).target/$(TARGET)/pagespeed/rules/minimize_request_size.o \
	$(obj).target/$(TARGET)/pagespeed/rules/optimize_images.o \
	$(obj).target/$(TARGET)/pagespeed/rules/optimize_the_order_of_styles_and_scripts.o \
	$(obj).target/$(TARGET)/pagespeed/rules/parallelize_downloads_across_hostnames.o \
	$(obj).target/$(TARGET)/pagespeed/rules/prefer_async_resources.o \
	$(obj).target/$(TARGET)/pagespeed/rules/put_css_in_the_document_head.o \
	$(obj).target/$(TARGET)/pagespeed/rules/remove_query_strings_from_static_resources.o \
	$(obj).target/$(TARGET)/pagespeed/rules/rule_provider.o \
	$(obj).target/$(TARGET)/pagespeed/rules/savings_computer.o \
	$(obj).target/$(TARGET)/pagespeed/rules/serve_resources_from_a_consistent_url.o \
	$(obj).target/$(TARGET)/pagespeed/rules/serve_scaled_images.o \
	$(obj).target/$(TARGET)/pagespeed/rules/serve_static_content_from_a_cookieless_domain.o \
	$(obj).target/$(TARGET)/pagespeed/rules/specify_a_cache_validator.o \
	$(obj).target/$(TARGET)/pagespeed/rules/specify_a_vary_accept_encoding_header.o \
	$(obj).target/$(TARGET)/pagespeed/rules/specify_charset_early.o \
	$(obj).target/$(TARGET)/pagespeed/rules/specify_image_dimensions.o \
	$(obj).target/$(TARGET)/pagespeed/rules/sprite_images.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/pagespeed/proto/libpagespeed_output_pb.a

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE)) $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE)) $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := -pthread \
	-Wl,-z,noexecstack \
	-rdynamic

LDFLAGS_Release := -pthread \
	-Wl,-z,noexecstack \
	-Wl,--gc-sections

LIBS := 

$(obj).target/pagespeed/libpagespeed_library.a: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/pagespeed/libpagespeed_library.a: LIBS := $(LIBS)
$(obj).target/pagespeed/libpagespeed_library.a: TOOLSET := $(TOOLSET)
$(obj).target/pagespeed/libpagespeed_library.a: $(OBJS) $(obj).target/pagespeed/proto/libpagespeed_output_pb.a FORCE_DO_CMD
	$(call do_cmd,alink)

all_deps += $(obj).target/pagespeed/libpagespeed_library.a
# Add target alias
.PHONY: pagespeed_library
pagespeed_library: $(obj).target/pagespeed/libpagespeed_library.a

# Add target alias to "all" target.
.PHONY: all
all: pagespeed_library


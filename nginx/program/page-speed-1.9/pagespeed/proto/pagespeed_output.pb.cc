// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pagespeed_output.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace pagespeed {

void protobuf_ShutdownFile_pagespeed_5foutput_2eproto() {
  delete Savings::default_instance_;
  delete InputInformation::default_instance_;
  delete ResultDetails::default_instance_;
  delete ImageDimensionDetails::default_instance_;
  delete RequestDetails::default_instance_;
  delete StylesInBodyDetails::default_instance_;
  delete ResourceOrderingDetails::default_instance_;
  delete CachingDetails::default_instance_;
  delete ParallelizableHostDetails::default_instance_;
  delete AvoidCssImportDetails::default_instance_;
  delete AvoidDocumentWriteDetails::default_instance_;
  delete PreferAsyncResourcesDetails::default_instance_;
  delete Result::default_instance_;
  delete Version::default_instance_;
  delete Results::default_instance_;
  delete FormatArgument::default_instance_;
  delete ResultText::default_instance_;
}

void protobuf_AddDesc_pagespeed_5foutput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  Savings::default_instance_ = new Savings();
  InputInformation::default_instance_ = new InputInformation();
  ResultDetails::default_instance_ = new ResultDetails();
  ImageDimensionDetails::default_instance_ = new ImageDimensionDetails();
  RequestDetails::default_instance_ = new RequestDetails();
  StylesInBodyDetails::default_instance_ = new StylesInBodyDetails();
  ResourceOrderingDetails::default_instance_ = new ResourceOrderingDetails();
  CachingDetails::default_instance_ = new CachingDetails();
  ParallelizableHostDetails::default_instance_ = new ParallelizableHostDetails();
  AvoidCssImportDetails::default_instance_ = new AvoidCssImportDetails();
  AvoidDocumentWriteDetails::default_instance_ = new AvoidDocumentWriteDetails();
  PreferAsyncResourcesDetails::default_instance_ = new PreferAsyncResourcesDetails();
  Result::default_instance_ = new Result();
  Version::default_instance_ = new Version();
  Results::default_instance_ = new Results();
  FormatArgument::default_instance_ = new FormatArgument();
  ResultText::default_instance_ = new ResultText();
  Savings::default_instance_->InitAsDefaultInstance();
  InputInformation::default_instance_->InitAsDefaultInstance();
  ResultDetails::default_instance_->InitAsDefaultInstance();
  ImageDimensionDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    4812135, 11, false, false,
    &::pagespeed::ImageDimensionDetails::default_instance());
  RequestDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    5399921, 11, false, false,
    &::pagespeed::RequestDetails::default_instance());
  StylesInBodyDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    5469305, 11, false, false,
    &::pagespeed::StylesInBodyDetails::default_instance());
  ResourceOrderingDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    5206628, 11, false, false,
    &::pagespeed::ResourceOrderingDetails::default_instance());
  CachingDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    4415843, 11, false, false,
    &::pagespeed::CachingDetails::default_instance());
  ParallelizableHostDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    4747123, 11, false, false,
    &::pagespeed::ParallelizableHostDetails::default_instance());
  AvoidCssImportDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    4812144, 11, false, false,
    &::pagespeed::AvoidCssImportDetails::default_instance());
  AvoidDocumentWriteDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    4277335, 11, false, false,
    &::pagespeed::AvoidDocumentWriteDetails::default_instance());
  PreferAsyncResourcesDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::pagespeed::ResultDetails::default_instance(),
    5012199, 11, false, false,
    &::pagespeed::PreferAsyncResourcesDetails::default_instance());
  Result::default_instance_->InitAsDefaultInstance();
  Version::default_instance_->InitAsDefaultInstance();
  Results::default_instance_->InitAsDefaultInstance();
  FormatArgument::default_instance_->InitAsDefaultInstance();
  ResultText::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pagespeed_5foutput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pagespeed_5foutput_2eproto {
  StaticDescriptorInitializer_pagespeed_5foutput_2eproto() {
    protobuf_AddDesc_pagespeed_5foutput_2eproto();
  }
} static_descriptor_initializer_pagespeed_5foutput_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Savings::kDnsRequestsSavedFieldNumber;
const int Savings::kRequestsSavedFieldNumber;
const int Savings::kResponseBytesSavedFieldNumber;
const int Savings::kPageReflowsSavedFieldNumber;
const int Savings::kRequestBytesSavedFieldNumber;
const int Savings::kCriticalPathLengthSavedFieldNumber;
#endif  // !_MSC_VER

Savings::Savings()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Savings::InitAsDefaultInstance() {
}

Savings::Savings(const Savings& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Savings::SharedCtor() {
  _cached_size_ = 0;
  dns_requests_saved_ = 0;
  requests_saved_ = 0;
  response_bytes_saved_ = 0;
  page_reflows_saved_ = 0;
  request_bytes_saved_ = 0;
  critical_path_length_saved_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Savings::~Savings() {
  SharedDtor();
}

void Savings::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Savings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Savings& Savings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

Savings* Savings::default_instance_ = NULL;

Savings* Savings::New() const {
  return new Savings;
}

void Savings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dns_requests_saved_ = 0;
    requests_saved_ = 0;
    response_bytes_saved_ = 0;
    page_reflows_saved_ = 0;
    request_bytes_saved_ = 0;
    critical_path_length_saved_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Savings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dns_requests_saved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dns_requests_saved_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_requests_saved;
        break;
      }
      
      // optional int32 requests_saved = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requests_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &requests_saved_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_response_bytes_saved;
        break;
      }
      
      // optional int32 response_bytes_saved = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_bytes_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_bytes_saved_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_page_reflows_saved;
        break;
      }
      
      // optional int32 page_reflows_saved = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_reflows_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_reflows_saved_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_request_bytes_saved;
        break;
      }
      
      // optional int32 request_bytes_saved = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_bytes_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_bytes_saved_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_critical_path_length_saved;
        break;
      }
      
      // optional int32 critical_path_length_saved = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_critical_path_length_saved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critical_path_length_saved_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Savings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dns_requests_saved = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dns_requests_saved(), output);
  }
  
  // optional int32 requests_saved = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->requests_saved(), output);
  }
  
  // optional int32 response_bytes_saved = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->response_bytes_saved(), output);
  }
  
  // optional int32 page_reflows_saved = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->page_reflows_saved(), output);
  }
  
  // optional int32 request_bytes_saved = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->request_bytes_saved(), output);
  }
  
  // optional int32 critical_path_length_saved = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->critical_path_length_saved(), output);
  }
  
}

int Savings::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dns_requests_saved = 1;
    if (has_dns_requests_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dns_requests_saved());
    }
    
    // optional int32 requests_saved = 2;
    if (has_requests_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->requests_saved());
    }
    
    // optional int32 response_bytes_saved = 3;
    if (has_response_bytes_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_bytes_saved());
    }
    
    // optional int32 page_reflows_saved = 4;
    if (has_page_reflows_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_reflows_saved());
    }
    
    // optional int32 request_bytes_saved = 5;
    if (has_request_bytes_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_bytes_saved());
    }
    
    // optional int32 critical_path_length_saved = 6;
    if (has_critical_path_length_saved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critical_path_length_saved());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Savings::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Savings*>(&from));
}

void Savings::MergeFrom(const Savings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_dns_requests_saved(from.dns_requests_saved());
    }
    if (from._has_bit(1)) {
      set_requests_saved(from.requests_saved());
    }
    if (from._has_bit(2)) {
      set_response_bytes_saved(from.response_bytes_saved());
    }
    if (from._has_bit(3)) {
      set_page_reflows_saved(from.page_reflows_saved());
    }
    if (from._has_bit(4)) {
      set_request_bytes_saved(from.request_bytes_saved());
    }
    if (from._has_bit(5)) {
      set_critical_path_length_saved(from.critical_path_length_saved());
    }
  }
}

void Savings::CopyFrom(const Savings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Savings::IsInitialized() const {
  
  return true;
}

void Savings::Swap(Savings* other) {
  if (other != this) {
    std::swap(dns_requests_saved_, other->dns_requests_saved_);
    std::swap(requests_saved_, other->requests_saved_);
    std::swap(response_bytes_saved_, other->response_bytes_saved_);
    std::swap(page_reflows_saved_, other->page_reflows_saved_);
    std::swap(request_bytes_saved_, other->request_bytes_saved_);
    std::swap(critical_path_length_saved_, other->critical_path_length_saved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Savings::GetTypeName() const {
  return "pagespeed.Savings";
}


// ===================================================================

#ifndef _MSC_VER
const int InputInformation::kNumberResourcesFieldNumber;
const int InputInformation::kNumberHostsFieldNumber;
const int InputInformation::kTotalRequestBytesFieldNumber;
const int InputInformation::kNumberStaticResourcesFieldNumber;
const int InputInformation::kHtmlResponseBytesFieldNumber;
const int InputInformation::kTextResponseBytesFieldNumber;
const int InputInformation::kCssResponseBytesFieldNumber;
const int InputInformation::kImageResponseBytesFieldNumber;
const int InputInformation::kJavascriptResponseBytesFieldNumber;
const int InputInformation::kFlashResponseBytesFieldNumber;
const int InputInformation::kOtherResponseBytesFieldNumber;
#endif  // !_MSC_VER

InputInformation::InputInformation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void InputInformation::InitAsDefaultInstance() {
}

InputInformation::InputInformation(const InputInformation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void InputInformation::SharedCtor() {
  _cached_size_ = 0;
  number_resources_ = 0;
  number_hosts_ = 0;
  total_request_bytes_ = GOOGLE_LONGLONG(0);
  number_static_resources_ = 0;
  html_response_bytes_ = GOOGLE_LONGLONG(0);
  text_response_bytes_ = GOOGLE_LONGLONG(0);
  css_response_bytes_ = GOOGLE_LONGLONG(0);
  image_response_bytes_ = GOOGLE_LONGLONG(0);
  javascript_response_bytes_ = GOOGLE_LONGLONG(0);
  flash_response_bytes_ = GOOGLE_LONGLONG(0);
  other_response_bytes_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputInformation::~InputInformation() {
  SharedDtor();
}

void InputInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const InputInformation& InputInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

InputInformation* InputInformation::default_instance_ = NULL;

InputInformation* InputInformation::New() const {
  return new InputInformation;
}

void InputInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    number_resources_ = 0;
    number_hosts_ = 0;
    total_request_bytes_ = GOOGLE_LONGLONG(0);
    number_static_resources_ = 0;
    html_response_bytes_ = GOOGLE_LONGLONG(0);
    text_response_bytes_ = GOOGLE_LONGLONG(0);
    css_response_bytes_ = GOOGLE_LONGLONG(0);
    image_response_bytes_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    javascript_response_bytes_ = GOOGLE_LONGLONG(0);
    flash_response_bytes_ = GOOGLE_LONGLONG(0);
    other_response_bytes_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool InputInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 number_resources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_resources_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_number_hosts;
        break;
      }
      
      // optional int32 number_hosts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_hosts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_hosts_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_request_bytes;
        break;
      }
      
      // optional int64 total_request_bytes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_request_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_request_bytes_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number_static_resources;
        break;
      }
      
      // optional int32 number_static_resources = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number_static_resources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_static_resources_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_html_response_bytes;
        break;
      }
      
      // optional int64 html_response_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_html_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &html_response_bytes_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_text_response_bytes;
        break;
      }
      
      // optional int64 text_response_bytes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &text_response_bytes_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_css_response_bytes;
        break;
      }
      
      // optional int64 css_response_bytes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_css_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &css_response_bytes_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_image_response_bytes;
        break;
      }
      
      // optional int64 image_response_bytes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &image_response_bytes_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_javascript_response_bytes;
        break;
      }
      
      // optional int64 javascript_response_bytes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_javascript_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &javascript_response_bytes_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_flash_response_bytes;
        break;
      }
      
      // optional int64 flash_response_bytes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flash_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flash_response_bytes_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_other_response_bytes;
        break;
      }
      
      // optional int64 other_response_bytes = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &other_response_bytes_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InputInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 number_resources = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->number_resources(), output);
  }
  
  // optional int32 number_hosts = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number_hosts(), output);
  }
  
  // optional int64 total_request_bytes = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_request_bytes(), output);
  }
  
  // optional int32 number_static_resources = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number_static_resources(), output);
  }
  
  // optional int64 html_response_bytes = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->html_response_bytes(), output);
  }
  
  // optional int64 text_response_bytes = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->text_response_bytes(), output);
  }
  
  // optional int64 css_response_bytes = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->css_response_bytes(), output);
  }
  
  // optional int64 image_response_bytes = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->image_response_bytes(), output);
  }
  
  // optional int64 javascript_response_bytes = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->javascript_response_bytes(), output);
  }
  
  // optional int64 flash_response_bytes = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->flash_response_bytes(), output);
  }
  
  // optional int64 other_response_bytes = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->other_response_bytes(), output);
  }
  
}

int InputInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 number_resources = 1;
    if (has_number_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_resources());
    }
    
    // optional int32 number_hosts = 2;
    if (has_number_hosts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_hosts());
    }
    
    // optional int64 total_request_bytes = 4;
    if (has_total_request_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_request_bytes());
    }
    
    // optional int32 number_static_resources = 5;
    if (has_number_static_resources()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number_static_resources());
    }
    
    // optional int64 html_response_bytes = 6;
    if (has_html_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->html_response_bytes());
    }
    
    // optional int64 text_response_bytes = 7;
    if (has_text_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->text_response_bytes());
    }
    
    // optional int64 css_response_bytes = 8;
    if (has_css_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->css_response_bytes());
    }
    
    // optional int64 image_response_bytes = 9;
    if (has_image_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->image_response_bytes());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 javascript_response_bytes = 10;
    if (has_javascript_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->javascript_response_bytes());
    }
    
    // optional int64 flash_response_bytes = 11;
    if (has_flash_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->flash_response_bytes());
    }
    
    // optional int64 other_response_bytes = 12;
    if (has_other_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->other_response_bytes());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputInformation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const InputInformation*>(&from));
}

void InputInformation::MergeFrom(const InputInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_number_resources(from.number_resources());
    }
    if (from._has_bit(1)) {
      set_number_hosts(from.number_hosts());
    }
    if (from._has_bit(2)) {
      set_total_request_bytes(from.total_request_bytes());
    }
    if (from._has_bit(3)) {
      set_number_static_resources(from.number_static_resources());
    }
    if (from._has_bit(4)) {
      set_html_response_bytes(from.html_response_bytes());
    }
    if (from._has_bit(5)) {
      set_text_response_bytes(from.text_response_bytes());
    }
    if (from._has_bit(6)) {
      set_css_response_bytes(from.css_response_bytes());
    }
    if (from._has_bit(7)) {
      set_image_response_bytes(from.image_response_bytes());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_javascript_response_bytes(from.javascript_response_bytes());
    }
    if (from._has_bit(9)) {
      set_flash_response_bytes(from.flash_response_bytes());
    }
    if (from._has_bit(10)) {
      set_other_response_bytes(from.other_response_bytes());
    }
  }
}

void InputInformation::CopyFrom(const InputInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInformation::IsInitialized() const {
  
  return true;
}

void InputInformation::Swap(InputInformation* other) {
  if (other != this) {
    std::swap(number_resources_, other->number_resources_);
    std::swap(number_hosts_, other->number_hosts_);
    std::swap(total_request_bytes_, other->total_request_bytes_);
    std::swap(number_static_resources_, other->number_static_resources_);
    std::swap(html_response_bytes_, other->html_response_bytes_);
    std::swap(text_response_bytes_, other->text_response_bytes_);
    std::swap(css_response_bytes_, other->css_response_bytes_);
    std::swap(image_response_bytes_, other->image_response_bytes_);
    std::swap(javascript_response_bytes_, other->javascript_response_bytes_);
    std::swap(flash_response_bytes_, other->flash_response_bytes_);
    std::swap(other_response_bytes_, other->other_response_bytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string InputInformation::GetTypeName() const {
  return "pagespeed.InputInformation";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResultDetails::ResultDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResultDetails::InitAsDefaultInstance() {
}

ResultDetails::ResultDetails(const ResultDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResultDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultDetails::~ResultDetails() {
  SharedDtor();
}

void ResultDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResultDetails& ResultDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

ResultDetails* ResultDetails::default_instance_ = NULL;

ResultDetails* ResultDetails::New() const {
  return new ResultDetails;
}

void ResultDetails::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResultDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((8000u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void ResultDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // Extension range [1000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1000, 536870912, output);
  
}

int ResultDetails::ByteSize() const {
  int total_size = 0;
  
  total_size += _extensions_.ByteSize();
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResultDetails*>(&from));
}

void ResultDetails::MergeFrom(const ResultDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
}

void ResultDetails::CopyFrom(const ResultDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultDetails::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void ResultDetails::Swap(ResultDetails* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::std::string ResultDetails::GetTypeName() const {
  return "pagespeed.ResultDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int ImageDimensionDetails::kExpectedHeightFieldNumber;
const int ImageDimensionDetails::kExpectedWidthFieldNumber;
const int ImageDimensionDetails::kActualHeightFieldNumber;
const int ImageDimensionDetails::kActualWidthFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ImageDimensionDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::ImageDimensionDetails >, 11, false >
  ImageDimensionDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::ImageDimensionDetails::default_instance());
ImageDimensionDetails::ImageDimensionDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ImageDimensionDetails::InitAsDefaultInstance() {
}

ImageDimensionDetails::ImageDimensionDetails(const ImageDimensionDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ImageDimensionDetails::SharedCtor() {
  _cached_size_ = 0;
  expected_height_ = 0;
  expected_width_ = 0;
  actual_height_ = 0;
  actual_width_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageDimensionDetails::~ImageDimensionDetails() {
  SharedDtor();
}

void ImageDimensionDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ImageDimensionDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageDimensionDetails& ImageDimensionDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

ImageDimensionDetails* ImageDimensionDetails::default_instance_ = NULL;

ImageDimensionDetails* ImageDimensionDetails::New() const {
  return new ImageDimensionDetails;
}

void ImageDimensionDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expected_height_ = 0;
    expected_width_ = 0;
    actual_height_ = 0;
    actual_width_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ImageDimensionDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 expected_height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expected_height_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expected_width;
        break;
      }
      
      // optional int32 expected_width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expected_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expected_width_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_actual_height;
        break;
      }
      
      // optional int32 actual_height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actual_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actual_height_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_actual_width;
        break;
      }
      
      // optional int32 actual_width = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actual_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actual_width_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageDimensionDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 expected_height = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->expected_height(), output);
  }
  
  // optional int32 expected_width = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expected_width(), output);
  }
  
  // optional int32 actual_height = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actual_height(), output);
  }
  
  // optional int32 actual_width = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actual_width(), output);
  }
  
}

int ImageDimensionDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 expected_height = 1;
    if (has_expected_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expected_height());
    }
    
    // optional int32 expected_width = 2;
    if (has_expected_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expected_width());
    }
    
    // optional int32 actual_height = 3;
    if (has_actual_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actual_height());
    }
    
    // optional int32 actual_width = 4;
    if (has_actual_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actual_width());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageDimensionDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageDimensionDetails*>(&from));
}

void ImageDimensionDetails::MergeFrom(const ImageDimensionDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_expected_height(from.expected_height());
    }
    if (from._has_bit(1)) {
      set_expected_width(from.expected_width());
    }
    if (from._has_bit(2)) {
      set_actual_height(from.actual_height());
    }
    if (from._has_bit(3)) {
      set_actual_width(from.actual_width());
    }
  }
}

void ImageDimensionDetails::CopyFrom(const ImageDimensionDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDimensionDetails::IsInitialized() const {
  
  return true;
}

void ImageDimensionDetails::Swap(ImageDimensionDetails* other) {
  if (other != this) {
    std::swap(expected_height_, other->expected_height_);
    std::swap(expected_width_, other->expected_width_);
    std::swap(actual_height_, other->actual_height_);
    std::swap(actual_width_, other->actual_width_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageDimensionDetails::GetTypeName() const {
  return "pagespeed.ImageDimensionDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int RequestDetails::kUrlLengthFieldNumber;
const int RequestDetails::kCookieLengthFieldNumber;
const int RequestDetails::kRefererLengthFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int RequestDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::RequestDetails >, 11, false >
  RequestDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::RequestDetails::default_instance());
RequestDetails::RequestDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RequestDetails::InitAsDefaultInstance() {
}

RequestDetails::RequestDetails(const RequestDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RequestDetails::SharedCtor() {
  _cached_size_ = 0;
  url_length_ = 0;
  cookie_length_ = 0;
  referer_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDetails::~RequestDetails() {
  SharedDtor();
}

void RequestDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RequestDetails& RequestDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

RequestDetails* RequestDetails::default_instance_ = NULL;

RequestDetails* RequestDetails::New() const {
  return new RequestDetails;
}

void RequestDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    url_length_ = 0;
    cookie_length_ = 0;
    referer_length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RequestDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 url_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &url_length_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cookie_length;
        break;
      }
      
      // optional int32 cookie_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cookie_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cookie_length_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_referer_length;
        break;
      }
      
      // optional int32 referer_length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referer_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referer_length_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 url_length = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->url_length(), output);
  }
  
  // optional int32 cookie_length = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cookie_length(), output);
  }
  
  // optional int32 referer_length = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->referer_length(), output);
  }
  
}

int RequestDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 url_length = 1;
    if (has_url_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->url_length());
    }
    
    // optional int32 cookie_length = 2;
    if (has_cookie_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cookie_length());
    }
    
    // optional int32 referer_length = 3;
    if (has_referer_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->referer_length());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RequestDetails*>(&from));
}

void RequestDetails::MergeFrom(const RequestDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_url_length(from.url_length());
    }
    if (from._has_bit(1)) {
      set_cookie_length(from.cookie_length());
    }
    if (from._has_bit(2)) {
      set_referer_length(from.referer_length());
    }
  }
}

void RequestDetails::CopyFrom(const RequestDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDetails::IsInitialized() const {
  
  return true;
}

void RequestDetails::Swap(RequestDetails* other) {
  if (other != this) {
    std::swap(url_length_, other->url_length_);
    std::swap(cookie_length_, other->cookie_length_);
    std::swap(referer_length_, other->referer_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RequestDetails::GetTypeName() const {
  return "pagespeed.RequestDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int StylesInBodyDetails::kNumInlineStyleBlocksFieldNumber;
const int StylesInBodyDetails::kExternalStylesFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int StylesInBodyDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::StylesInBodyDetails >, 11, false >
  StylesInBodyDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::StylesInBodyDetails::default_instance());
StylesInBodyDetails::StylesInBodyDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StylesInBodyDetails::InitAsDefaultInstance() {
}

StylesInBodyDetails::StylesInBodyDetails(const StylesInBodyDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StylesInBodyDetails::SharedCtor() {
  _cached_size_ = 0;
  num_inline_style_blocks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StylesInBodyDetails::~StylesInBodyDetails() {
  SharedDtor();
}

void StylesInBodyDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StylesInBodyDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StylesInBodyDetails& StylesInBodyDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

StylesInBodyDetails* StylesInBodyDetails::default_instance_ = NULL;

StylesInBodyDetails* StylesInBodyDetails::New() const {
  return new StylesInBodyDetails;
}

void StylesInBodyDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_inline_style_blocks_ = 0;
  }
  external_styles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StylesInBodyDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_inline_style_blocks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_inline_style_blocks_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_external_styles;
        break;
      }
      
      // repeated string external_styles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_styles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_external_styles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_external_styles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StylesInBodyDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_inline_style_blocks = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_inline_style_blocks(), output);
  }
  
  // repeated string external_styles = 2;
  for (int i = 0; i < this->external_styles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->external_styles(i), output);
  }
  
}

int StylesInBodyDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_inline_style_blocks = 1;
    if (has_num_inline_style_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_inline_style_blocks());
    }
    
  }
  // repeated string external_styles = 2;
  total_size += 1 * this->external_styles_size();
  for (int i = 0; i < this->external_styles_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->external_styles(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StylesInBodyDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StylesInBodyDetails*>(&from));
}

void StylesInBodyDetails::MergeFrom(const StylesInBodyDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  external_styles_.MergeFrom(from.external_styles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_inline_style_blocks(from.num_inline_style_blocks());
    }
  }
}

void StylesInBodyDetails::CopyFrom(const StylesInBodyDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesInBodyDetails::IsInitialized() const {
  
  return true;
}

void StylesInBodyDetails::Swap(StylesInBodyDetails* other) {
  if (other != this) {
    std::swap(num_inline_style_blocks_, other->num_inline_style_blocks_);
    external_styles_.Swap(&other->external_styles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StylesInBodyDetails::GetTypeName() const {
  return "pagespeed.StylesInBodyDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceOrderingDetails::kOutOfOrderExternalCssFieldNumber;
const int ResourceOrderingDetails::kOutOfOrderInlineScriptsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ResourceOrderingDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::ResourceOrderingDetails >, 11, false >
  ResourceOrderingDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::ResourceOrderingDetails::default_instance());
ResourceOrderingDetails::ResourceOrderingDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResourceOrderingDetails::InitAsDefaultInstance() {
}

ResourceOrderingDetails::ResourceOrderingDetails(const ResourceOrderingDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceOrderingDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceOrderingDetails::~ResourceOrderingDetails() {
  SharedDtor();
}

void ResourceOrderingDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceOrderingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResourceOrderingDetails& ResourceOrderingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

ResourceOrderingDetails* ResourceOrderingDetails::default_instance_ = NULL;

ResourceOrderingDetails* ResourceOrderingDetails::New() const {
  return new ResourceOrderingDetails;
}

void ResourceOrderingDetails::Clear() {
  out_of_order_external_css_.Clear();
  out_of_order_inline_scripts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResourceOrderingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string out_of_order_external_css = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_out_of_order_external_css:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_out_of_order_external_css()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_out_of_order_external_css;
        if (input->ExpectTag(16)) goto parse_out_of_order_inline_scripts;
        break;
      }
      
      // repeated int32 out_of_order_inline_scripts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_out_of_order_inline_scripts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_out_of_order_inline_scripts())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_out_of_order_inline_scripts())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_out_of_order_inline_scripts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceOrderingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string out_of_order_external_css = 1;
  for (int i = 0; i < this->out_of_order_external_css_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->out_of_order_external_css(i), output);
  }
  
  // repeated int32 out_of_order_inline_scripts = 2;
  for (int i = 0; i < this->out_of_order_inline_scripts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->out_of_order_inline_scripts(i), output);
  }
  
}

int ResourceOrderingDetails::ByteSize() const {
  int total_size = 0;
  
  // repeated string out_of_order_external_css = 1;
  total_size += 1 * this->out_of_order_external_css_size();
  for (int i = 0; i < this->out_of_order_external_css_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->out_of_order_external_css(i));
  }
  
  // repeated int32 out_of_order_inline_scripts = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->out_of_order_inline_scripts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->out_of_order_inline_scripts(i));
    }
    total_size += 1 * this->out_of_order_inline_scripts_size() + data_size;
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceOrderingDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResourceOrderingDetails*>(&from));
}

void ResourceOrderingDetails::MergeFrom(const ResourceOrderingDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  out_of_order_external_css_.MergeFrom(from.out_of_order_external_css_);
  out_of_order_inline_scripts_.MergeFrom(from.out_of_order_inline_scripts_);
}

void ResourceOrderingDetails::CopyFrom(const ResourceOrderingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceOrderingDetails::IsInitialized() const {
  
  return true;
}

void ResourceOrderingDetails::Swap(ResourceOrderingDetails* other) {
  if (other != this) {
    out_of_order_external_css_.Swap(&other->out_of_order_external_css_);
    out_of_order_inline_scripts_.Swap(&other->out_of_order_inline_scripts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResourceOrderingDetails::GetTypeName() const {
  return "pagespeed.ResourceOrderingDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int CachingDetails::kFreshnessLifetimeMillisFieldNumber;
const int CachingDetails::kIsHeuristicallyCacheableFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int CachingDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::CachingDetails >, 11, false >
  CachingDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::CachingDetails::default_instance());
CachingDetails::CachingDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CachingDetails::InitAsDefaultInstance() {
}

CachingDetails::CachingDetails(const CachingDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CachingDetails::SharedCtor() {
  _cached_size_ = 0;
  freshness_lifetime_millis_ = GOOGLE_LONGLONG(0);
  is_heuristically_cacheable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CachingDetails::~CachingDetails() {
  SharedDtor();
}

void CachingDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CachingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CachingDetails& CachingDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

CachingDetails* CachingDetails::default_instance_ = NULL;

CachingDetails* CachingDetails::New() const {
  return new CachingDetails;
}

void CachingDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    freshness_lifetime_millis_ = GOOGLE_LONGLONG(0);
    is_heuristically_cacheable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CachingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 freshness_lifetime_millis = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freshness_lifetime_millis_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_heuristically_cacheable;
        break;
      }
      
      // optional bool is_heuristically_cacheable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_heuristically_cacheable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_heuristically_cacheable_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CachingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 freshness_lifetime_millis = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->freshness_lifetime_millis(), output);
  }
  
  // optional bool is_heuristically_cacheable = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_heuristically_cacheable(), output);
  }
  
}

int CachingDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 freshness_lifetime_millis = 1;
    if (has_freshness_lifetime_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freshness_lifetime_millis());
    }
    
    // optional bool is_heuristically_cacheable = 2;
    if (has_is_heuristically_cacheable()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CachingDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CachingDetails*>(&from));
}

void CachingDetails::MergeFrom(const CachingDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_freshness_lifetime_millis(from.freshness_lifetime_millis());
    }
    if (from._has_bit(1)) {
      set_is_heuristically_cacheable(from.is_heuristically_cacheable());
    }
  }
}

void CachingDetails::CopyFrom(const CachingDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CachingDetails::IsInitialized() const {
  
  return true;
}

void CachingDetails::Swap(CachingDetails* other) {
  if (other != this) {
    std::swap(freshness_lifetime_millis_, other->freshness_lifetime_millis_);
    std::swap(is_heuristically_cacheable_, other->is_heuristically_cacheable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CachingDetails::GetTypeName() const {
  return "pagespeed.CachingDetails";
}


// ===================================================================

const ::std::string ParallelizableHostDetails::_default_host_;
#ifndef _MSC_VER
const int ParallelizableHostDetails::kHostFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int ParallelizableHostDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::ParallelizableHostDetails >, 11, false >
  ParallelizableHostDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::ParallelizableHostDetails::default_instance());
ParallelizableHostDetails::ParallelizableHostDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ParallelizableHostDetails::InitAsDefaultInstance() {
}

ParallelizableHostDetails::ParallelizableHostDetails(const ParallelizableHostDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ParallelizableHostDetails::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParallelizableHostDetails::~ParallelizableHostDetails() {
  SharedDtor();
}

void ParallelizableHostDetails::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void ParallelizableHostDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ParallelizableHostDetails& ParallelizableHostDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

ParallelizableHostDetails* ParallelizableHostDetails::default_instance_ = NULL;

ParallelizableHostDetails* ParallelizableHostDetails::New() const {
  return new ParallelizableHostDetails;
}

void ParallelizableHostDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ParallelizableHostDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParallelizableHostDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
}

int ParallelizableHostDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParallelizableHostDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ParallelizableHostDetails*>(&from));
}

void ParallelizableHostDetails::MergeFrom(const ParallelizableHostDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
  }
}

void ParallelizableHostDetails::CopyFrom(const ParallelizableHostDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParallelizableHostDetails::IsInitialized() const {
  
  return true;
}

void ParallelizableHostDetails::Swap(ParallelizableHostDetails* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ParallelizableHostDetails::GetTypeName() const {
  return "pagespeed.ParallelizableHostDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int AvoidCssImportDetails::kImportedStylesheetsFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int AvoidCssImportDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::AvoidCssImportDetails >, 11, false >
  AvoidCssImportDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::AvoidCssImportDetails::default_instance());
AvoidCssImportDetails::AvoidCssImportDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AvoidCssImportDetails::InitAsDefaultInstance() {
}

AvoidCssImportDetails::AvoidCssImportDetails(const AvoidCssImportDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AvoidCssImportDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvoidCssImportDetails::~AvoidCssImportDetails() {
  SharedDtor();
}

void AvoidCssImportDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvoidCssImportDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvoidCssImportDetails& AvoidCssImportDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

AvoidCssImportDetails* AvoidCssImportDetails::default_instance_ = NULL;

AvoidCssImportDetails* AvoidCssImportDetails::New() const {
  return new AvoidCssImportDetails;
}

void AvoidCssImportDetails::Clear() {
  imported_stylesheets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AvoidCssImportDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string imported_stylesheets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imported_stylesheets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_imported_stylesheets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_imported_stylesheets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvoidCssImportDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string imported_stylesheets = 1;
  for (int i = 0; i < this->imported_stylesheets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->imported_stylesheets(i), output);
  }
  
}

int AvoidCssImportDetails::ByteSize() const {
  int total_size = 0;
  
  // repeated string imported_stylesheets = 1;
  total_size += 1 * this->imported_stylesheets_size();
  for (int i = 0; i < this->imported_stylesheets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->imported_stylesheets(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvoidCssImportDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvoidCssImportDetails*>(&from));
}

void AvoidCssImportDetails::MergeFrom(const AvoidCssImportDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  imported_stylesheets_.MergeFrom(from.imported_stylesheets_);
}

void AvoidCssImportDetails::CopyFrom(const AvoidCssImportDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvoidCssImportDetails::IsInitialized() const {
  
  return true;
}

void AvoidCssImportDetails::Swap(AvoidCssImportDetails* other) {
  if (other != this) {
    imported_stylesheets_.Swap(&other->imported_stylesheets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AvoidCssImportDetails::GetTypeName() const {
  return "pagespeed.AvoidCssImportDetails";
}


// ===================================================================

#ifndef _MSC_VER
const int AvoidDocumentWriteDetails::kUrlsFieldNumber;
const int AvoidDocumentWriteDetails::kLineNumberFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int AvoidDocumentWriteDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::AvoidDocumentWriteDetails >, 11, false >
  AvoidDocumentWriteDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::AvoidDocumentWriteDetails::default_instance());
AvoidDocumentWriteDetails::AvoidDocumentWriteDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AvoidDocumentWriteDetails::InitAsDefaultInstance() {
}

AvoidDocumentWriteDetails::AvoidDocumentWriteDetails(const AvoidDocumentWriteDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AvoidDocumentWriteDetails::SharedCtor() {
  _cached_size_ = 0;
  line_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvoidDocumentWriteDetails::~AvoidDocumentWriteDetails() {
  SharedDtor();
}

void AvoidDocumentWriteDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvoidDocumentWriteDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AvoidDocumentWriteDetails& AvoidDocumentWriteDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

AvoidDocumentWriteDetails* AvoidDocumentWriteDetails::default_instance_ = NULL;

AvoidDocumentWriteDetails* AvoidDocumentWriteDetails::New() const {
  return new AvoidDocumentWriteDetails;
}

void AvoidDocumentWriteDetails::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    line_number_ = 0;
  }
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AvoidDocumentWriteDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string urls = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_urls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_urls;
        if (input->ExpectTag(16)) goto parse_line_number;
        break;
      }
      
      // required int32 line_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_number_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AvoidDocumentWriteDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string urls = 1;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->urls(i), output);
  }
  
  // required int32 line_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line_number(), output);
  }
  
}

int AvoidDocumentWriteDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 line_number = 2;
    if (has_line_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_number());
    }
    
  }
  // repeated string urls = 1;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->urls(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvoidDocumentWriteDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AvoidDocumentWriteDetails*>(&from));
}

void AvoidDocumentWriteDetails::MergeFrom(const AvoidDocumentWriteDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_.MergeFrom(from.urls_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_line_number(from.line_number());
    }
  }
}

void AvoidDocumentWriteDetails::CopyFrom(const AvoidDocumentWriteDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvoidDocumentWriteDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void AvoidDocumentWriteDetails::Swap(AvoidDocumentWriteDetails* other) {
  if (other != this) {
    urls_.Swap(&other->urls_);
    std::swap(line_number_, other->line_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AvoidDocumentWriteDetails::GetTypeName() const {
  return "pagespeed.AvoidDocumentWriteDetails";
}


// ===================================================================

const ::std::string PreferAsyncResourcesDetails::_default_resource_url_;
#ifndef _MSC_VER
const int PreferAsyncResourcesDetails::kResourceUrlFieldNumber;
#endif  // !_MSC_VER

#ifndef _MSC_VER
const int PreferAsyncResourcesDetails::kMessageSetExtensionFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::pagespeed::ResultDetails,
    ::google::protobuf::internal::MessageTypeTraits< ::pagespeed::PreferAsyncResourcesDetails >, 11, false >
  PreferAsyncResourcesDetails::message_set_extension(kMessageSetExtensionFieldNumber, ::pagespeed::PreferAsyncResourcesDetails::default_instance());
PreferAsyncResourcesDetails::PreferAsyncResourcesDetails()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PreferAsyncResourcesDetails::InitAsDefaultInstance() {
}

PreferAsyncResourcesDetails::PreferAsyncResourcesDetails(const PreferAsyncResourcesDetails& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PreferAsyncResourcesDetails::SharedCtor() {
  _cached_size_ = 0;
  resource_url_ = const_cast< ::std::string*>(&_default_resource_url_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PreferAsyncResourcesDetails::~PreferAsyncResourcesDetails() {
  SharedDtor();
}

void PreferAsyncResourcesDetails::SharedDtor() {
  if (resource_url_ != &_default_resource_url_) {
    delete resource_url_;
  }
  if (this != default_instance_) {
  }
}

void PreferAsyncResourcesDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PreferAsyncResourcesDetails& PreferAsyncResourcesDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

PreferAsyncResourcesDetails* PreferAsyncResourcesDetails::default_instance_ = NULL;

PreferAsyncResourcesDetails* PreferAsyncResourcesDetails::New() const {
  return new PreferAsyncResourcesDetails;
}

void PreferAsyncResourcesDetails::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (resource_url_ != &_default_resource_url_) {
        resource_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PreferAsyncResourcesDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string resource_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PreferAsyncResourcesDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string resource_url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->resource_url(), output);
  }
  
}

int PreferAsyncResourcesDetails::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string resource_url = 1;
    if (has_resource_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource_url());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreferAsyncResourcesDetails::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PreferAsyncResourcesDetails*>(&from));
}

void PreferAsyncResourcesDetails::MergeFrom(const PreferAsyncResourcesDetails& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_resource_url(from.resource_url());
    }
  }
}

void PreferAsyncResourcesDetails::CopyFrom(const PreferAsyncResourcesDetails& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferAsyncResourcesDetails::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PreferAsyncResourcesDetails::Swap(PreferAsyncResourcesDetails* other) {
  if (other != this) {
    std::swap(resource_url_, other->resource_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PreferAsyncResourcesDetails::GetTypeName() const {
  return "pagespeed.PreferAsyncResourcesDetails";
}


// ===================================================================

const ::std::string Result::_default_rule_name_;
const ::std::string Result::_default_optimized_content_;
const ::std::string Result::_default_optimized_content_mime_type_;
#ifndef _MSC_VER
const int Result::kRuleNameFieldNumber;
const int Result::kSavingsFieldNumber;
const int Result::kResourceUrlsFieldNumber;
const int Result::kDetailsFieldNumber;
const int Result::kOptimizedContentFieldNumber;
const int Result::kOriginalResponseBytesFieldNumber;
const int Result::kOriginalRequestBytesFieldNumber;
const int Result::kOriginalCriticalPathLengthFieldNumber;
const int Result::kOptimizedContentMimeTypeFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Result::InitAsDefaultInstance() {
  savings_ = const_cast< ::pagespeed::Savings*>(&::pagespeed::Savings::default_instance());
  details_ = const_cast< ::pagespeed::ResultDetails*>(&::pagespeed::ResultDetails::default_instance());
}

Result::Result(const Result& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  rule_name_ = const_cast< ::std::string*>(&_default_rule_name_);
  savings_ = NULL;
  details_ = NULL;
  optimized_content_ = const_cast< ::std::string*>(&_default_optimized_content_);
  original_response_bytes_ = 0;
  original_request_bytes_ = 0;
  original_critical_path_length_ = 0;
  optimized_content_mime_type_ = const_cast< ::std::string*>(&_default_optimized_content_mime_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  SharedDtor();
}

void Result::SharedDtor() {
  if (rule_name_ != &_default_rule_name_) {
    delete rule_name_;
  }
  if (optimized_content_ != &_default_optimized_content_) {
    delete optimized_content_;
  }
  if (optimized_content_mime_type_ != &_default_optimized_content_mime_type_) {
    delete optimized_content_mime_type_;
  }
  if (this != default_instance_) {
    delete savings_;
    delete details_;
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (rule_name_ != &_default_rule_name_) {
        rule_name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (savings_ != NULL) savings_->::pagespeed::Savings::Clear();
    }
    if (_has_bit(3)) {
      if (details_ != NULL) details_->::pagespeed::ResultDetails::Clear();
    }
    if (_has_bit(4)) {
      if (optimized_content_ != &_default_optimized_content_) {
        optimized_content_->clear();
      }
    }
    original_response_bytes_ = 0;
    original_request_bytes_ = 0;
    original_critical_path_length_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (optimized_content_mime_type_ != &_default_optimized_content_mime_type_) {
        optimized_content_mime_type_->clear();
      }
    }
  }
  resource_urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string rule_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rule_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_savings;
        break;
      }
      
      // optional .pagespeed.Savings savings = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_savings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_savings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource_urls;
        break;
      }
      
      // repeated string resource_urls = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resource_urls()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource_urls;
        if (input->ExpectTag(34)) goto parse_details;
        break;
      }
      
      // optional .pagespeed.ResultDetails details = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_optimized_content;
        break;
      }
      
      // optional bytes optimized_content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimized_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optimized_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_original_response_bytes;
        break;
      }
      
      // optional int32 original_response_bytes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_response_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_response_bytes_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_original_request_bytes;
        break;
      }
      
      // optional int32 original_request_bytes = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_request_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_request_bytes_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_original_critical_path_length;
        break;
      }
      
      // optional int32 original_critical_path_length = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_critical_path_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &original_critical_path_length_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_optimized_content_mime_type;
        break;
      }
      
      // optional string optimized_content_mime_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimized_content_mime_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optimized_content_mime_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string rule_name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rule_name(), output);
  }
  
  // optional .pagespeed.Savings savings = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->savings(), output);
  }
  
  // repeated string resource_urls = 3;
  for (int i = 0; i < this->resource_urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resource_urls(i), output);
  }
  
  // optional .pagespeed.ResultDetails details = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->details(), output);
  }
  
  // optional bytes optimized_content = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->optimized_content(), output);
  }
  
  // optional int32 original_response_bytes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->original_response_bytes(), output);
  }
  
  // optional int32 original_request_bytes = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->original_request_bytes(), output);
  }
  
  // optional int32 original_critical_path_length = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->original_critical_path_length(), output);
  }
  
  // optional string optimized_content_mime_type = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->optimized_content_mime_type(), output);
  }
  
}

int Result::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string rule_name = 1;
    if (has_rule_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rule_name());
    }
    
    // optional .pagespeed.Savings savings = 2;
    if (has_savings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->savings());
    }
    
    // optional .pagespeed.ResultDetails details = 4;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->details());
    }
    
    // optional bytes optimized_content = 5;
    if (has_optimized_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->optimized_content());
    }
    
    // optional int32 original_response_bytes = 6;
    if (has_original_response_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_response_bytes());
    }
    
    // optional int32 original_request_bytes = 7;
    if (has_original_request_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_request_bytes());
    }
    
    // optional int32 original_critical_path_length = 8;
    if (has_original_critical_path_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->original_critical_path_length());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string optimized_content_mime_type = 9;
    if (has_optimized_content_mime_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optimized_content_mime_type());
    }
    
  }
  // repeated string resource_urls = 3;
  total_size += 1 * this->resource_urls_size();
  for (int i = 0; i < this->resource_urls_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resource_urls(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Result*>(&from));
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_urls_.MergeFrom(from.resource_urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rule_name(from.rule_name());
    }
    if (from._has_bit(1)) {
      mutable_savings()->::pagespeed::Savings::MergeFrom(from.savings());
    }
    if (from._has_bit(3)) {
      mutable_details()->::pagespeed::ResultDetails::MergeFrom(from.details());
    }
    if (from._has_bit(4)) {
      set_optimized_content(from.optimized_content());
    }
    if (from._has_bit(5)) {
      set_original_response_bytes(from.original_response_bytes());
    }
    if (from._has_bit(6)) {
      set_original_request_bytes(from.original_request_bytes());
    }
    if (from._has_bit(7)) {
      set_original_critical_path_length(from.original_critical_path_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_optimized_content_mime_type(from.optimized_content_mime_type());
    }
  }
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_details()) {
    if (!this->details().IsInitialized()) return false;
  }
  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(rule_name_, other->rule_name_);
    std::swap(savings_, other->savings_);
    resource_urls_.Swap(&other->resource_urls_);
    std::swap(details_, other->details_);
    std::swap(optimized_content_, other->optimized_content_);
    std::swap(original_response_bytes_, other->original_response_bytes_);
    std::swap(original_request_bytes_, other->original_request_bytes_);
    std::swap(original_critical_path_length_, other->original_critical_path_length_);
    std::swap(optimized_content_mime_type_, other->optimized_content_mime_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Result::GetTypeName() const {
  return "pagespeed.Result";
}


// ===================================================================

#ifndef _MSC_VER
const int Version::kMajorFieldNumber;
const int Version::kMinorFieldNumber;
const int Version::kOfficialReleaseFieldNumber;
#endif  // !_MSC_VER

Version::Version()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  official_release_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  SharedDtor();
}

void Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New() const {
  return new Version;
}

void Version::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    major_ = 0;
    minor_ = 0;
    official_release_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 major = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }
      
      // required int32 minor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_official_release;
        break;
      }
      
      // required bool official_release = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_official_release:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &official_release_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 major = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }
  
  // required int32 minor = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }
  
  // required bool official_release = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->official_release(), output);
  }
  
}

int Version::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }
    
    // required int32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }
    
    // required bool official_release = 3;
    if (has_official_release()) {
      total_size += 1 + 1;
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Version*>(&from));
}

void Version::MergeFrom(const Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_major(from.major());
    }
    if (from._has_bit(1)) {
      set_minor(from.minor());
    }
    if (from._has_bit(2)) {
      set_official_release(from.official_release());
    }
  }
}

void Version::CopyFrom(const Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Version::Swap(Version* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(official_release_, other->official_release_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Version::GetTypeName() const {
  return "pagespeed.Version";
}


// ===================================================================

#ifndef _MSC_VER
const int Results::kResultsFieldNumber;
const int Results::kInputInfoFieldNumber;
const int Results::kRulesFieldNumber;
const int Results::kErrorRulesFieldNumber;
const int Results::kVersionFieldNumber;
#endif  // !_MSC_VER

Results::Results()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Results::InitAsDefaultInstance() {
  input_info_ = const_cast< ::pagespeed::InputInformation*>(&::pagespeed::InputInformation::default_instance());
  version_ = const_cast< ::pagespeed::Version*>(&::pagespeed::Version::default_instance());
}

Results::Results(const Results& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Results::SharedCtor() {
  _cached_size_ = 0;
  input_info_ = NULL;
  version_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Results::~Results() {
  SharedDtor();
}

void Results::SharedDtor() {
  if (this != default_instance_) {
    delete input_info_;
    delete version_;
  }
}

void Results::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Results& Results::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

Results* Results::default_instance_ = NULL;

Results* Results::New() const {
  return new Results;
}

void Results::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (input_info_ != NULL) input_info_->::pagespeed::InputInformation::Clear();
    }
    if (_has_bit(4)) {
      if (version_ != NULL) version_->::pagespeed::Version::Clear();
    }
  }
  results_.Clear();
  rules_.Clear();
  error_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Results::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pagespeed.Result results = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectTag(18)) goto parse_input_info;
        break;
      }
      
      // required .pagespeed.InputInformation input_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rules;
        break;
      }
      
      // repeated string rules = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rules;
        if (input->ExpectTag(34)) goto parse_error_rules;
        break;
      }
      
      // repeated string error_rules = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_error_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error_rules;
        if (input->ExpectTag(42)) goto parse_version;
        break;
      }
      
      // required .pagespeed.Version version = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Results::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .pagespeed.Result results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->results(i), output);
  }
  
  // required .pagespeed.InputInformation input_info = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->input_info(), output);
  }
  
  // repeated string rules = 3;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rules(i), output);
  }
  
  // repeated string error_rules = 4;
  for (int i = 0; i < this->error_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->error_rules(i), output);
  }
  
  // required .pagespeed.Version version = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->version(), output);
  }
  
}

int Results::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .pagespeed.InputInformation input_info = 2;
    if (has_input_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_info());
    }
    
    // required .pagespeed.Version version = 5;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->version());
    }
    
  }
  // repeated .pagespeed.Result results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }
  
  // repeated string rules = 3;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->rules(i));
  }
  
  // repeated string error_rules = 4;
  total_size += 1 * this->error_rules_size();
  for (int i = 0; i < this->error_rules_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->error_rules(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Results::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Results*>(&from));
}

void Results::MergeFrom(const Results& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  rules_.MergeFrom(from.rules_);
  error_rules_.MergeFrom(from.error_rules_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_input_info()->::pagespeed::InputInformation::MergeFrom(from.input_info());
    }
    if (from._has_bit(4)) {
      mutable_version()->::pagespeed::Version::MergeFrom(from.version());
    }
  }
}

void Results::CopyFrom(const Results& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Results::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000012) != 0x00000012) return false;
  
  for (int i = 0; i < results_size(); i++) {
    if (!this->results(i).IsInitialized()) return false;
  }
  if (has_version()) {
    if (!this->version().IsInitialized()) return false;
  }
  return true;
}

void Results::Swap(Results* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(input_info_, other->input_info_);
    rules_.Swap(&other->rules_);
    error_rules_.Swap(&other->error_rules_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Results::GetTypeName() const {
  return "pagespeed.Results";
}


// ===================================================================

bool FormatArgument_ArgumentType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const FormatArgument_ArgumentType FormatArgument::URL;
const FormatArgument_ArgumentType FormatArgument::STRING_LITERAL;
const FormatArgument_ArgumentType FormatArgument::INT_LITERAL;
const FormatArgument_ArgumentType FormatArgument::BYTES;
const FormatArgument_ArgumentType FormatArgument::DURATION;
const FormatArgument_ArgumentType FormatArgument::ArgumentType_MIN;
const FormatArgument_ArgumentType FormatArgument::ArgumentType_MAX;
const int FormatArgument::ArgumentType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string FormatArgument::_default_string_value_;
#ifndef _MSC_VER
const int FormatArgument::kTypeFieldNumber;
const int FormatArgument::kStringValueFieldNumber;
const int FormatArgument::kIntValueFieldNumber;
#endif  // !_MSC_VER

FormatArgument::FormatArgument()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FormatArgument::InitAsDefaultInstance() {
}

FormatArgument::FormatArgument(const FormatArgument& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FormatArgument::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  string_value_ = const_cast< ::std::string*>(&_default_string_value_);
  int_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormatArgument::~FormatArgument() {
  SharedDtor();
}

void FormatArgument::SharedDtor() {
  if (string_value_ != &_default_string_value_) {
    delete string_value_;
  }
  if (this != default_instance_) {
  }
}

void FormatArgument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FormatArgument& FormatArgument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

FormatArgument* FormatArgument::default_instance_ = NULL;

FormatArgument* FormatArgument::New() const {
  return new FormatArgument;
}

void FormatArgument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (_has_bit(1)) {
      if (string_value_ != &_default_string_value_) {
        string_value_->clear();
      }
    }
    int_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FormatArgument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pagespeed.FormatArgument.ArgumentType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pagespeed::FormatArgument_ArgumentType_IsValid(value)) {
            set_type(static_cast< ::pagespeed::FormatArgument_ArgumentType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_value;
        break;
      }
      
      // optional int64 int_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_value_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormatArgument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .pagespeed.FormatArgument.ArgumentType type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string string_value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->string_value(), output);
  }
  
  // optional int64 int_value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int_value(), output);
  }
  
}

int FormatArgument::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pagespeed.FormatArgument.ArgumentType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string string_value = 2;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
    // optional int64 int_value = 3;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_value());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormatArgument::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FormatArgument*>(&from));
}

void FormatArgument::MergeFrom(const FormatArgument& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_string_value(from.string_value());
    }
    if (from._has_bit(2)) {
      set_int_value(from.int_value());
    }
  }
}

void FormatArgument::CopyFrom(const FormatArgument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatArgument::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FormatArgument::Swap(FormatArgument* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(string_value_, other->string_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FormatArgument::GetTypeName() const {
  return "pagespeed.FormatArgument";
}


// ===================================================================

const ::std::string ResultText::_default_format_;
const ::std::string ResultText::_default_optimized_content_;
#ifndef _MSC_VER
const int ResultText::kFormatFieldNumber;
const int ResultText::kArgsFieldNumber;
const int ResultText::kChildrenFieldNumber;
const int ResultText::kOptimizedContentFieldNumber;
#endif  // !_MSC_VER

ResultText::ResultText()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResultText::InitAsDefaultInstance() {
}

ResultText::ResultText(const ResultText& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResultText::SharedCtor() {
  _cached_size_ = 0;
  format_ = const_cast< ::std::string*>(&_default_format_);
  optimized_content_ = const_cast< ::std::string*>(&_default_optimized_content_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultText::~ResultText() {
  SharedDtor();
}

void ResultText::SharedDtor() {
  if (format_ != &_default_format_) {
    delete format_;
  }
  if (optimized_content_ != &_default_optimized_content_) {
    delete optimized_content_;
  }
  if (this != default_instance_) {
  }
}

void ResultText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResultText& ResultText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pagespeed_5foutput_2eproto();  return *default_instance_;
}

ResultText* ResultText::default_instance_ = NULL;

ResultText* ResultText::New() const {
  return new ResultText;
}

void ResultText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (format_ != &_default_format_) {
        format_->clear();
      }
    }
    if (_has_bit(3)) {
      if (optimized_content_ != &_default_optimized_content_) {
        optimized_content_->clear();
      }
    }
  }
  args_.Clear();
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResultText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string format = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }
      
      // repeated .pagespeed.FormatArgument args = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }
      
      // repeated .pagespeed.ResultText children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectTag(34)) goto parse_optimized_content;
        break;
      }
      
      // optional bytes optimized_content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimized_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_optimized_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string format = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->format(), output);
  }
  
  // repeated .pagespeed.FormatArgument args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->args(i), output);
  }
  
  // repeated .pagespeed.ResultText children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->children(i), output);
  }
  
  // optional bytes optimized_content = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->optimized_content(), output);
  }
  
}

int ResultText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string format = 1;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }
    
    // optional bytes optimized_content = 4;
    if (has_optimized_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->optimized_content());
    }
    
  }
  // repeated .pagespeed.FormatArgument args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  // repeated .pagespeed.ResultText children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultText::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResultText*>(&from));
}

void ResultText::MergeFrom(const ResultText& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_format(from.format());
    }
    if (from._has_bit(3)) {
      set_optimized_content(from.optimized_content());
    }
  }
}

void ResultText::CopyFrom(const ResultText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultText::IsInitialized() const {
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

void ResultText::Swap(ResultText* other) {
  if (other != this) {
    std::swap(format_, other->format_);
    args_.Swap(&other->args_);
    children_.Swap(&other->children_);
    std::swap(optimized_content_, other->optimized_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResultText::GetTypeName() const {
  return "pagespeed.ResultText";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pagespeed

// @@protoc_insertion_point(global_scope)
